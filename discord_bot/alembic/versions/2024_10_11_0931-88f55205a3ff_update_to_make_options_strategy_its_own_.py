"""update to make options strategy its own db table

Revision ID: 88f55205a3ff
Revises: 7ea347927615
Create Date: 2024-10-11 09:31:04.528789

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

import sys
import os

# Add the project root directory to the Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from backend.app.enum_type import EnumType
from backend.app import models

# revision identifiers, used by Alembic.
revision: str = '88f55205a3ff'
down_revision: Union[str, None] = '7ea347927615'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        op.create_table('options_strategy_transactions',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('strategy_id', sa.Integer(), nullable=True),
            sa.Column('transaction_type', sa.String(), nullable=True),
            sa.Column('net_cost', sa.Float(), nullable=False),
            sa.Column('size', sa.String(), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(['strategy_id'], ['options_strategy_trades.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    except sa.exc.OperationalError as e:
        if "table options_strategy_transactions already exists" in str(e):
            print("Table options_strategy_transactions already exists. Skipping creation.")
        else:
            raise

    try:
        op.create_index(op.f('ix_options_strategy_transactions_id'), 'options_strategy_transactions', ['id'], unique=False)
    except sa.exc.OperationalError as e:
        if "index ix_options_strategy_transactions_id already exists" in str(e):
            print("Index ix_options_strategy_transactions_id already exists. Skipping creation.")
        else:
            raise

    # Check if trade_id column exists before adding it
    from sqlalchemy import inspect
    inspector = inspect(op.get_bind())
    existing_columns = [col['name'] for col in inspector.get_columns('options_strategy_trades')]
    
    if 'trade_id' not in existing_columns:
        op.add_column('options_strategy_trades', sa.Column('trade_id', sa.String(), nullable=False))
    else:
        print("Column trade_id already exists in options_strategy_trades. Skipping addition.")

    # Add other columns only if they don't exist
    columns_to_add = [
        ('legs', sa.String()),
        ('net_cost', sa.Float()),
        ('average_net_cost', sa.Float()),
        ('size', sa.String()),
        ('current_size', sa.String())
    ]

    for col_name, col_type in columns_to_add:
        if col_name not in existing_columns:
            op.add_column('options_strategy_trades', sa.Column(col_name, col_type, nullable=False))
        else:
            print(f"Column {col_name} already exists in options_strategy_trades. Skipping addition.")

    # Create index only if it doesn't exist
    try:
        op.create_index(op.f('ix_options_strategy_trades_trade_id'), 'options_strategy_trades', ['trade_id'], unique=True)
    except sa.exc.OperationalError:
        print("Index ix_options_strategy_trades_trade_id already exists. Skipping creation.")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_options_strategy_trades_trade_id'), table_name='options_strategy_trades')
    op.drop_column('options_strategy_trades', 'current_size')
    op.drop_column('options_strategy_trades', 'size')
    op.drop_column('options_strategy_trades', 'average_net_cost')
    op.drop_column('options_strategy_trades', 'net_cost')
    op.drop_column('options_strategy_trades', 'legs')
    op.drop_column('options_strategy_trades', 'trade_id')
    op.drop_index(op.f('ix_options_strategy_transactions_id'), table_name='options_strategy_transactions')
    op.drop_table('options_strategy_transactions')
    # ### end Alembic commands ###
